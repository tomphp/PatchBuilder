<?php

namespace TomPHP\PatchBuilder;

use TomPHP\PatchBuilder\Buffer\EditableLineBuffer;
use TomPHP\PatchBuilder\Buffer\LineBuffer;
use TomPHP\PatchBuilder\Types\LineRangeInterface;
use TomPHP\PatchBuilder\LineTracker\LineTracker;
use TomPHP\PatchBuilder\Types\OriginalLineNumber;
use TomPHP\PatchBuilder\Types\LineRange;

class PatchBuffer
{
    /**
     * @var LineBuffer
     */
    private $original;

    /**
     * @var EditableLineBuffer
     */
    private $modified;

    /**
     * @var LineTracker
     */
    private $lineTracker;

    public function __construct(
        LineBuffer $original,
        EditableLineBuffer $modified,
        LineTracker $lineTracker
    ) {
        // @todo Verify contents matches

        $this->original    = $original;
        $this->modified    = $modified;
        $this->lineTracker = $lineTracker;
    }

    /**
     * @return string[]
     */
    public function getOriginalContents()
    {
        return $this->original->getContents();
    }

    /**
     * @return string[]
     */
    public function getModifiedContents()
    {
        return $this->modified->getContents();
    }

    public function replace(LineRangeInterface $range, array $lines)
    {
        if ($range->getStart() instanceof OriginalLineNumber) {
            $range = new LineRange(
                $this->lineTracker->trackLine($range->getStart()),
                $this->lineTracker->trackLine($range->getEnd())
            );
        }

        $this->modified->replace($range, $lines);
    }

    /*
    public function removeLine($lineNumber)
    {
        $this->modified->delete(new LineRange($lineNumber, $lineNumber));
    }

    public function insert($lineNumber, array $lines)
    {
        $this->modified->insert($lineNumber, $lines);
    }

    public function getLine($lineNumber)
    {
        $lines = $this->modified->getLines(new LineRange($lineNumber, $lineNumber));

        return reset($lines);
    }
    */

    /**
     * @param string[] $contents
     *
     * @return PatchBuffer
     */
    public static function createWithContents(array $contents)
    {
        return new self(
            new LineBuffer($contents),
            new EditableLineBuffer($contents),
            new LineTracker()
        );
    }
}
